datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Blog {
  id             String     @id @default(cuid())
  slug           String     @unique
  title          String
  coverImage     String?
  content        String?    @db.Text
  seoTitle       String?
  seoDescription String?
  authorId       String
  published      Boolean    @default(false)
  views          Int        @default(0)
  author         User       @relation(fields: [authorId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  BlogView       BlogView[]
}

model BlogView {
  id               String   @id @default(cuid())
  blogId           String
  blog             Blog     @relation(fields: [blogId], references: [id])
  viewerIdentifier String // This could be an IP address or a session ID
  createdAt        DateTime @default(now())

  @@unique([blogId, viewerIdentifier]) // Ensures a unique view per blog per viewer
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          String?

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog[]
}

model Newsletter {
  id    String @id @default(cuid())
  email String @unique
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
